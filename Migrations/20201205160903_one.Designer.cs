// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roofcare_APIs.Data;

namespace Roofcare_APIs.Migrations
{
    [DbContext(typeof(RoofCareDbContext))]
    [Migration("20201205160903_one")]
    partial class one
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Roofcare_APIs.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BookingByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingToId")
                        .HasColumnType("int");

                    b.Property<bool>("CompletedStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("CustomerAcceptance")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PaidStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ServiceCharge")
                        .HasColumnType("float");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCharge")
                        .HasColumnType("float");

                    b.Property<double>("TravellingCost")
                        .HasColumnType("float");

                    b.Property<bool>("VendorAcceptance")
                        .HasColumnType("bit");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingByUserId");

                    b.HasIndex("BookingToId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserFavByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserFavToUserId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("UserFavByUserId");

                    b.HasIndex("UserFavToUserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("FeedbackByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackToUserId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("FeedbackId");

                    b.HasIndex("FeedbackByUserId");

                    b.HasIndex("FeedbackToUserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("OfferDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId");

                    b.HasIndex("AddedByUserId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.OfferReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("ReportText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("OfferReports");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfessionId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.SavedOffer", b =>
                {
                    b.Property<int>("SavedOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SavedOfferId");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedOffers");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.UserProfession", b =>
                {
                    b.Property<int>("UserProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserProfessionId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfessions");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Booking", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.User", "BookingBy")
                        .WithMany("BookingsBy")
                        .HasForeignKey("BookingByUserId");

                    b.HasOne("Roofcare_APIs.Models.User", "BookingTo")
                        .WithMany("BookingsTo")
                        .HasForeignKey("BookingToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingBy");

                    b.Navigation("BookingTo");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Favorite", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.User", "UserFavBy")
                        .WithMany("UserFavBy")
                        .HasForeignKey("UserFavByUserId");

                    b.HasOne("Roofcare_APIs.Models.User", "UserFavTo")
                        .WithMany("UserFavTo")
                        .HasForeignKey("UserFavToUserId");

                    b.Navigation("UserFavBy");

                    b.Navigation("UserFavTo");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Feedback", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.User", "FeedbackBy")
                        .WithMany("FeedbacksBy")
                        .HasForeignKey("FeedbackByUserId");

                    b.HasOne("Roofcare_APIs.Models.User", "FeedbackTo")
                        .WithMany("FeedbacksTo")
                        .HasForeignKey("FeedbackToUserId");

                    b.Navigation("FeedbackBy");

                    b.Navigation("FeedbackTo");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Offer", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.User", "AddedBy")
                        .WithMany("Offers")
                        .HasForeignKey("AddedByUserId");

                    b.Navigation("AddedBy");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.OfferReport", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.Offer", "Offer")
                        .WithMany("OfferReports")
                        .HasForeignKey("OfferId");

                    b.HasOne("Roofcare_APIs.Models.User", "User")
                        .WithMany("OfferReports")
                        .HasForeignKey("UserId");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.SavedOffer", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.Offer", "Offer")
                        .WithMany("SavedOffers")
                        .HasForeignKey("OfferId");

                    b.HasOne("Roofcare_APIs.Models.User", "User")
                        .WithMany("SavedOffers")
                        .HasForeignKey("UserId");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.UserProfession", b =>
                {
                    b.HasOne("Roofcare_APIs.Models.Profession", "Profession")
                        .WithMany("UserProfessions")
                        .HasForeignKey("ProfessionId");

                    b.HasOne("Roofcare_APIs.Models.User", "User")
                        .WithMany("UserProfessions")
                        .HasForeignKey("UserId");

                    b.Navigation("Profession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Offer", b =>
                {
                    b.Navigation("OfferReports");

                    b.Navigation("SavedOffers");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.Profession", b =>
                {
                    b.Navigation("UserProfessions");
                });

            modelBuilder.Entity("Roofcare_APIs.Models.User", b =>
                {
                    b.Navigation("BookingsBy");

                    b.Navigation("BookingsTo");

                    b.Navigation("FeedbacksBy");

                    b.Navigation("FeedbacksTo");

                    b.Navigation("OfferReports");

                    b.Navigation("Offers");

                    b.Navigation("SavedOffers");

                    b.Navigation("UserFavBy");

                    b.Navigation("UserFavTo");

                    b.Navigation("UserProfessions");
                });
#pragma warning restore 612, 618
        }
    }
}
